[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 b64 authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Josiah Parry. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Parry J (2024). b64: Fast Vectorized Base 64 Engine. R package version 0.1.0.","code":"@Manual{,   title = {b64: Fast and Vectorized Base 64 Engine},   author = {Josiah Parry},   year = {2024},   note = {R package version 0.1.0}, }"},{"path":"/index.html","id":"b64","dir":"","previous_headings":"","what":"Fast and Vectorized Base 64 Engine","title":"Fast and Vectorized Base 64 Engine","text":"goal b64 provide fast, lightweight, vectorized base64 encoder decoder.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Fast and Vectorized Base 64 Engine","text":"can install development version b64 like :","code":"pak::pak(\"extendr/b64\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Fast and Vectorized Base 64 Engine","text":"Encode base64 using encode(). Decode using decode() can convert decoded base64 characters see worked.","code":"library(b64)  hello <- encode(\"Hello, from extendr\") hello #> [1] \"SGVsbG8sIGZyb20gZXh0ZW5kcg==\" decoded <- decode(hello) decoded #> <blob[1]> #> [1] blob[19 B] rawToChar(decoded[[1]]) #> [1] \"Hello, from extendr\""},{"path":"/index.html","id":"vectorized","dir":"","previous_headings":"Example","what":"Vectorized","title":"Fast and Vectorized Base 64 Engine","text":"encode() decode() vectorized. can decode using decode() well. always return blob object.","code":"lorem <- unlist(lorem::ipsum(5, 1,  5)) lorem #> [1] \"Sit ligula senectus litora viverra consequat.\"           #> [2] \"Consectetur vulputate vivamus sapien a ridiculus porta.\" #> [3] \"Ipsum orci cras posuere lacus.\"                          #> [4] \"Lorem nostra hendrerit nascetur vel duis consequat.\"     #> [5] \"Adipiscing dui blandit vestibulum bibendum?\"  encoded <- encode(lorem) encoded #> [1] \"U2l0IGxpZ3VsYSBzZW5lY3R1cyBsaXRvcmEgdml2ZXJyYSBjb25zZXF1YXQu\"                 #> [2] \"Q29uc2VjdGV0dXIgdnVscHV0YXRlIHZpdmFtdXMgc2FwaWVuIGEgcmlkaWN1bHVzIHBvcnRhLg==\" #> [3] \"SXBzdW0gb3JjaSBjcmFzIHBvc3VlcmUgbGFjdXMu\"                                     #> [4] \"TG9yZW0gbm9zdHJhIGhlbmRyZXJpdCBuYXNjZXR1ciB2ZWwgZHVpcyBjb25zZXF1YXQu\"         #> [5] \"QWRpcGlzY2luZyBkdWkgYmxhbmRpdCB2ZXN0aWJ1bHVtIGJpYmVuZHVtPw==\" decode(encoded) #> <blob[5]> #> [1] blob[45 B] blob[55 B] blob[30 B] blob[51 B] blob[43 B]"},{"path":"/index.html","id":"encoding-and-decoding-files","dir":"","previous_headings":"","what":"Encoding and decoding files","title":"Fast and Vectorized Base 64 Engine","text":"b64 shines encoding decoding files. encode_file() decode_file() work reading file stream making far faster alternative. encoding impressive, better yet decoding performance.","code":"tmp <- tempfile()  fp <- \"https://github.com/datablist/sample-csv-files/raw/main/files/leads/leads-100000.csv\"  download.file(fp, tmp)  bench::mark(   b64 = encode_file(tmp),   base64enc = base64enc::base64encode(tmp) ) #> Warning: Some expressions had a GC in every iteration; so filtering is #> disabled. #> # A tibble: 2 × 6 #>   expression      min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 b64          39.8ms   41.3ms     24.0       24MB      0   #> 2 base64enc   112.1ms  115.2ms      8.56    66.5MB     17.1 # create a temp file tmp2 <- tempfile()  # encode it and write to tmep file encode_file(tmp) |>   charToRaw() |>   writeBin(tmp2)  bench::mark(   b64 = decode_file(tmp2),   base64enc = base64enc::base64decode(file(tmp2)) ) #> # A tibble: 2 × 6 #>   expression      min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 b64          16.1ms   16.8ms     56.1       18MB     9.34 #> 2 base64enc   209.1ms  210.7ms      4.75      18MB     0"},{"path":"/index.html","id":"alternative-engines","dir":"","previous_headings":"","what":"Alternative engines","title":"Fast and Vectorized Base 64 Engine","text":"box, b64 provides number pre-configured engines can used. function engine() allows choose one different engines example, engine(\"url_safe\") provides standard engine uses url-safe alphabet padding. try decode using standard engine, encounter error. can use new engine decode .","code":"url_engine <- engine(\"url_safe\") url_safe_encoded <- encode(\"\\xfa\\xec U\", url_engine) url_safe_encoded #> [1] \"-uwgVQ==\" decode(url_safe_encoded) #> Error in decode_(what, eng): Invalid byte 45, offset 0. decode(url_safe_encoded, url_engine) #> <blob[1]> #> [1] blob[4 B]"},{"path":"/index.html","id":"custom-engines","dir":"","previous_headings":"Alternative engines","what":"Custom Engines","title":"Fast and Vectorized Base 64 Engine","text":"can create custom engines new_engine(). allows us provide alphabet configuration. can use one many predefined alphabets create one selves new_alphabet(). can also specify engine config using new_config() lets us choose whether pad handle decoding. engine can used encode decode text. Compare standard encoder:","code":"my_eng <- new_engine(   alphabet(\"crypt\"),   new_config(TRUE, TRUE, \"none\") ) txt <- \"lorem ipsum sit dolor amet\"  encode(txt, my_eng) #> [1] \"P4xmNKoUOL/nRKoUQqZo64FjP4xm643hNLE=\" encode(txt) #> [1] \"bG9yZW0gaXBzdW0gc2l0IGRvbG9yIGFtZXQ=\""},{"path":"/reference/alphabet.html","id":null,"dir":"Reference","previous_headings":"","what":"Standard base64 alphabets — alphabet","title":"Standard base64 alphabets — alphabet","text":"Create alphabet set standard base64 alphabets, use .","code":""},{"path":"/reference/alphabet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard base64 alphabets — alphabet","text":"","code":"alphabet(which = \"standard\")  new_alphabet(chars)"},{"path":"/reference/alphabet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standard base64 alphabets — alphabet","text":"default \"standard\". base64 alphabet use. See details values. chars character scalar contains 64 unique characters.","code":""},{"path":"/reference/alphabet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standard base64 alphabets — alphabet","text":"object class alphabet","code":""},{"path":"/reference/alphabet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standard base64 alphabets — alphabet","text":"\"bcrypt\": bcrypt alphabet \"bin_hex\": alphabet used BinHex 4.0 files \"crypt\": crypt(3) alphabet (. / first two characters) \"imap_mutf7\": alphabet used IMAP-modified UTF-7 (+ ,) \"standard\": standard alphabet (+ /) specified RFC 4648 \"url_safe\": URL-safe alphabet (- _) specified RFC 4648 See base64 crate definitions come.","code":""},{"path":"/reference/alphabet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standard base64 alphabets — alphabet","text":"","code":"alphabet(\"standard\") #> <alphabet> #> ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/ alphabet(\"bcrypt\") #> <alphabet> #> ./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 alphabet(\"bin_hex\") #> <alphabet> #> !\"#$%&'()*+,-0123456789@ABCDEFGHIJKLMNPQRSTUVXYZ[`abcdehijklmpqr alphabet(\"crypt\") #> <alphabet> #> ./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz alphabet(\"imap_mutf7\") #> <alphabet> #> ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+, alphabet(\"url_safe\") #> <alphabet> #> ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_  new_alphabet(\"qwertyuiop[]asdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890\") #> <alphabet> #> qwertyuiop[]asdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890"},{"path":"/reference/b64-package.html","id":null,"dir":"Reference","previous_headings":"","what":"b64: Fast and Vectorized Base 64 Engine — b64-package","title":"b64: Fast and Vectorized Base 64 Engine — b64-package","text":"Provides fast, lightweight, vectorized base 64 engine encode decode character raw vectors well files stored disk. Common base 64 alphabets supported box including standard, URL-safe, bcrypt, crypt, 'BinHex', IMAP-modified UTF-7 alphabets. Custom engines can created support unique base 64 encoding decoding needs.","code":""},{"path":"/reference/b64-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"b64: Fast and Vectorized Base 64 Engine — b64-package","text":"Maintainer: Josiah Parry josiah.parry@gmail.com (ORCID)","code":""},{"path":"/reference/encode.html","id":null,"dir":"Reference","previous_headings":"","what":"Encode and decode using base64 — encode","title":"Encode and decode using base64 — encode","text":"Encode decode using base64","code":""},{"path":"/reference/encode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Encode and decode using base64 — encode","text":"","code":"encode(what, eng = engine())  decode(what, eng = engine())  encode_file(path, eng = engine())  decode_file(path, eng = engine())"},{"path":"/reference/encode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Encode and decode using base64 — encode","text":"character, raw, blob vector eng base64 engine. See engine() details. path path base64 encoded file.","code":""},{"path":"/reference/encode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Encode and decode using base64 — encode","text":"encode() decode() vectorized. return character blob vector length , respectively.","code":""},{"path":"/reference/encode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Encode and decode using base64 — encode","text":"","code":"# encode hello world encoded <- encode(\"Hello world\") encoded #> [1] \"SGVsbG8gd29ybGQ=\"  # decode to a blob decoded <- decode(encoded) decoded #> <blob[1]> #> [1] blob[11 B]  # convert back to a character rawToChar(decoded[[1]]) #> [1] \"Hello world\""},{"path":"/reference/engine.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an encoding engine — engine","title":"Create an encoding engine — engine","text":"Create encoding engine","code":""},{"path":"/reference/engine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an encoding engine — engine","text":"","code":"engine(which = \"standard\")  new_engine(.alphabet = alphabet(), .config = new_config())"},{"path":"/reference/engine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an encoding engine — engine","text":"default \"standard\". base64 encoding engine used. See details . .alphabet object class alphabet created alphabet() new_alphabet() .config object class engine_config created new_config()","code":""},{"path":"/reference/engine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an encoding engine — engine","text":"object class engine.","code":""},{"path":[]},{"path":"/reference/engine.html","id":"engines","dir":"Reference","previous_headings":"","what":"Engines","title":"Create an encoding engine — engine","text":"default, \"standard\" base64 engine used specified RFC 4648. Additional pre-configured base64 engines provided : \"standard_no_pad\": uses standard engine without padding \"url_safe\": uses url-safe alphabet padding \"url_safe_no_pad\": uses url-safe alphabet without padding See base64 crate .","code":""},{"path":"/reference/engine.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an encoding engine — engine","text":"","code":"engine() #> <engine> new_engine(alphabet(\"bcrypt\"), new_config()) #> <engine>"},{"path":"/reference/new_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a custom encoding engine — new_config","title":"Create a custom encoding engine — new_config","text":"Create custom encoding engine","code":""},{"path":"/reference/new_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a custom encoding engine — new_config","text":"","code":"new_config(   encode_padding = TRUE,   decode_padding_trailing_bits = FALSE,   decode_padding_mode = c(\"canonical\", \"indifferent\", \"none\") )"},{"path":"/reference/new_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a custom encoding engine — new_config","text":"encode_padding default TRUE add 1-2 trailing = pad results decode_padding_trailing_bits default FALSE. \"invalid trailing bits present true, bits silently ignored.\" (See details reference). decode_padding_mode default \"canonical\". values \"indifferent\" \"none\". See details .","code":""},{"path":"/reference/new_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a custom encoding engine — new_config","text":"object class engine_config","code":""},{"path":"/reference/new_config.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a custom encoding engine — new_config","text":"See base64 crate details.","code":""},{"path":"/reference/new_config.html","id":"decode-padding-modes","dir":"Reference","previous_headings":"","what":"Decode Padding Modes","title":"Create a custom encoding engine — new_config","text":"three modes can used decode_padding_mode argument. \"canonical\": padding must consist 0, 1, 2 = characters \"none\": must padding characters present \"indifferent\": canonical padding used, omitted padding characters also permitted","code":""},{"path":"/reference/new_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a custom encoding engine — new_config","text":"","code":"# create a new nonsensicle config new_config(FALSE, TRUE, \"none\") #> <engine_config>"},{"path":"/reference/utils.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility Functions — b64_chunk","title":"Utility Functions — b64_chunk","text":"Functions perform common tasks working base64 encoded strings.","code":""},{"path":"/reference/utils.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility Functions — b64_chunk","text":"","code":"b64_chunk(encoded, width)  b64_wrap(chunks, newline)"},{"path":"/reference/utils.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility Functions — b64_chunk","text":"encoded character vector base64 encoded strings. width numeric scalar defining width chunks. Must divisible 4. chunks character vector base64 encoded strings. newline character scalar defining newline character.","code":""},{"path":"/reference/utils.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility Functions — b64_chunk","text":"b64_chunk() returns list character vectors. b64_wrap() returns scalar character vector.","code":""},{"path":"/reference/utils.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Utility Functions — b64_chunk","text":"b64_chunk() splits character vector base64 encoded strings chunks specified width. b64_wrap() wraps character vector base64 encoded strings newline character.","code":""},{"path":"/reference/utils.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utility Functions — b64_chunk","text":"","code":"encoded <- encode(\"Hello, world!\") chunked <- b64_chunk(encoded, 4) chunked #> [[1]] #> [1] \"SGVs\" \"bG8s\" \"IHdv\" \"cmxk\" \"IQ==\" #>   b64_wrap(chunked, \"\\n\") #> [1] \"SGVs\\nbG8s\\nIHdv\\ncmxk\\nIQ==\""},{"path":"/news/index.html","id":"b64-010","dir":"Changelog","previous_headings":"","what":"b64 0.1.0","title":"b64 0.1.0","text":"CRAN release: 2024-01-15 Initial CRAN submission.","code":""}]
